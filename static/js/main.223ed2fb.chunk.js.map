{"version":3,"sources":["components/Card.js","components/cardArray.js","components/searchbar.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","className","alt","src","this","props","id","name","email","Component","CardArray1","array1","robots","map","user","i","SearchBar","searchchange","type","placeholder","onChange","App","onsearch","event","setState","searchbox","target","value","state","robot","fetch","then","response","json","users","filteredRobots","filter","robo","toLowerCase","includes","style","overflowY","border","height","React","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"iPAgBeA,E,4JAdX,WACI,OACI,sBAAKC,UAAY,sDAAjB,UACI,qBAAKC,IAAM,SAASC,IAAG,+BAA4BC,KAAKC,MAAMC,GAAvC,mBACvB,gCACI,6BAAKF,KAAKC,MAAME,OAChB,4BAAIH,KAAKC,MAAMG,kB,GAPhBC,aCYJC,EAVI,SAAC,GAAa,IACvBC,EADsB,EAAXC,OACKC,KAAI,SAACC,EAAKC,GAC5B,OAAQ,cAAC,EAAD,CAAMT,GAAMQ,EAAKR,GAAIC,KAAQO,EAAKP,KAAMC,MAASM,EAAKN,WAElE,OACI,8BACKG,KCEEK,EAVG,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aAChB,OACI,sBAAKhB,UAAY,MAAjB,UACI,+CACA,uBAAOiB,KAAO,SAASC,YAAc,eACrCC,SAAYH,EACZhB,UAAY,yCC+BToB,G,wDAjCX,aAAc,IAAD,8BACT,gBAYJC,SAAW,SAACC,GACR,EAAKC,SAAS,CAACC,UAAWF,EAAMG,OAAOC,SAZvC,EAAKC,MAAQ,CACTC,MAAO,GAEPJ,UAAW,IALN,E,qDAQb,WAAoB,IAAD,OACfK,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,EAAKV,SAAS,CAACK,MAAMK,S,oBAM7C,WAAS,IAAD,OACEC,EAAiB/B,KAAKwB,MAAMC,MAAMO,QAAO,SAAAC,GAE3C,OAAOA,EAAK9B,KAAK+B,cAAcC,SAAS,EAAKX,MAAMH,UAAUa,kBAGjE,OACI,sBAAKrC,UAAY,KAAjB,UACI,cAAC,EAAD,CAAWgB,aAAgBb,KAAKkB,WAChC,qBAAKkB,MAAS,CAACC,UAAY,SAAUC,OAAO,kBAAmBC,OAAO,SAAtE,SACA,cAAC,EAAD,CAAY/B,OAAUuB,a,GA5BpBS,IAAMnC,YCQToC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OAAO,cAAC,EAAD,IACdC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.223ed2fb.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nclass Card extends Component{\r\n    render(){\r\n        return(\r\n            <div className = 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n                <img alt = 'robots' src = {`https://robohash.org/${this.props.id}?size=200x200`}/>\r\n                <div>\r\n                    <h2>{this.props.name}</h2>\r\n                    <p>{this.props.email}</p>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n        ; \r\n    }\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardArray1 = ({robots})=> {\r\n    const array1 = robots.map((user,i) => {\r\n        return (<Card id = {user.id} name = {user.name} email = {user.email}/>);\r\n    })\r\n    return (\r\n        <div>\r\n            {array1}\r\n        </div>\r\n    );\r\n}\r\nexport default CardArray1;\r\n","import React from 'react';\r\nconst SearchBar = ({searchchange}) =>{\r\n    return(\r\n        <div className=  'pa2'>\r\n            <h1> RoboFriends </h1>\r\n            <input type = \"search\" placeholder = \"Search Here \" \r\n            onChange = {searchchange}  \r\n            className = 'pa3 ba b--green bg-lightest-blue'/>\r\n        </div>\r\n    );\r\n}\r\nexport default SearchBar;","import React from 'react';\r\nimport CardArray1 from '../components/cardArray';\r\nimport SearchBar from '../components/searchbar';\r\nimport './App.css';\r\nclass App extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            robot: []\r\n            ,\r\n            searchbox: ''\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => {this.setState({robot:users})})\r\n    }\r\n    onsearch = (event)=>{\r\n        this.setState({searchbox: event.target.value});\r\n        \r\n    }\r\n    render(){\r\n        const filteredRobots = this.state.robot.filter(robo => {\r\n            \r\n            return robo.name.toLowerCase().includes(this.state.searchbox.toLowerCase());\r\n        });\r\n        \r\n        return(\r\n            <div className = 'tc'>\r\n                <SearchBar searchchange = {this.onsearch}/>\r\n                <div style = {{overflowY : 'scroll', border:'1px solid black', height:'500px'}}>\r\n                <CardArray1 robots=  {filteredRobots}/>\r\n                </div>\r\n            </div>\r\n            );\r\n    }\r\n}\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'tachyons';\r\nimport App from './containers/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(<App/>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}